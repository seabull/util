#!/usr/local/bin/perl -w
#------------------------------------------------------------------------------

use Getopt::Std ;

use POSIX qw( tmpnam ) ;

use IO::File ;

#------------------------------------------------------------------------------

use strict ;

use vars qw ( %options %words ) ;

#------------------------------------------------------------------------------

main:
{
  getopts ( 'w:', \%options ) ;

  ! defined ( $options{w} ) &&
    usage("word file missing - please provide") ;

  local $/ ;	# undefine record separator

  parse_word_file ( $options{w} ) ;

  foreach my $file ( @ARGV )
  {
    ( my $in = new IO::File ( $file, "r" ) )
      or usage("unable to open '%s' - %s",$file,$!) ;

    my ( $new_file, $out ) = temporary_file ( $file, "$$.new" ) ;

#   my $out = *STDOUT ;

    replace_words ( $in, $out ) ;

    $in->close() ;
    $out->close() ;

    my ( $old_file, $old ) = temporary_file ( $file, "old" ) ;

    $old->close() ;

    rename ( $file, $old_file )
      or die "rename $file to $old_file failed\n" ;
    rename ( $new_file, $file )
      or die "rename $new_file to $file failed\n" ;
    unlink ( $old_file )
      or die "unlink $old_file failed\n" ;
  }
}

#------------------------------------------------------------------------------

sub parse_word_file
{
  my $file = $_[0] ;

  ( my $in = new IO::File ( $file, "r" ) )
    or usage("unable to open '%s' - %s",$file,$!) ;

  my $text = <$in> ;

  $in->close() ;

  while ( $text =~ m{ ("[^"\\]*(?:\\.[^"\\]*)*")	# 1 - quoted string	"..."
                    | ('[^'\\]*(?:\\.[^'\\]*)*')	# 2 - quoted string	'...'
                    | ([-][-][^\n]*)			# 3 - SQL comment	-- ...
                    | ([Rr][Ee][Mm][ \t][^\n]*)		# 4 - SQL comment	REM ...
                    | (/\*[^*]*\*+(?:[^/*][^*]*\*+)*/)	# 5 - C style comment	/* ... */
                    | ([0-9][\w_]*)			# 6 - word starting with numeric
                    | ([\w_]+)				# 7 - word starting with alpha or '_'
                    | (.|[\n])				# 8 - non-word or newline
                    }gx )
  {
    ( defined ( $7 ) ) &&
      ( $words{ lc($7) } = $7 ) ;
  }
}

#------------------------------------------------------------------------------

sub temporary_file
{
  my ( $tmp_file, $out ) = ( "$_[0].$_[1]", undef ) ;

  while ( ! defined ( $out = new IO::File($tmp_file,O_RDWR|O_CREAT|O_EXCL) ) )
  {
    $tmp_file .= ".$_[1]" ;
  }

  ( $tmp_file, $out ) ;
}

#------------------------------------------------------------------------------

sub word
{
  defined ( $words{ lc($_[0]) } ) ? $words{ lc($_[0]) } : $_[0] ;
}
 
#------------------------------------------------------------------------------

sub replace_words
{
  my ( $in, $out ) = @_ ;

  my $text = <$in> ;

  while ( $text =~ m{ ("[^"\\]*(?:\\.[^"\\]*)*")	# 1 - quoted string	"..."
                    | ('[^'\\]*(?:\\.[^'\\]*)*')	# 2 - quoted string	'...'
                    | ([-][-][^\n]*)			# 3 - SQL comment	-- ...
                    | ([Rr][Ee][Mm][ \t][^\n]*)		# 4 - SQL comment	REM ...
                    | (/\*[^*]*\*+(?:[^/*][^*]*\*+)*/)	# 5 - C style comment	/* ... */
                    | ([0-9][\w_]*)			# 6 - word starting with numeric
                    | ([\w_]+)				# 7 - word starting with alpha or '_'
                    | (.|[\n])				# 8 - non-word or newline
                    }gx )
  {
    ( defined($1) &&	print $out $1 )		||
    ( defined($2) &&	print $out $2 )		||
    ( defined($3) &&	print $out $3 )		||
    ( defined($4) &&	print $out $4 )		||
    ( defined($5) &&	print $out $5 )		||
    ( defined($6) &&	print $out $6 )		||
    ( defined($7) &&	print $out word($7) )	||
    ( defined($8) &&	print $out $8 )	;
  }
}
 
#------------------------------------------------------------------------------
 
sub usage
{
  printf STDERR "\n" ;
  printf STDERR "Error:  " . shift(@_) . "\n", @_ ;
  printf STDERR "\n" ;

  printf STDERR "Usage:  sql-apply-case -w <word-file> <file> [ ... ]\n" ;
  printf STDERR "\n" ;
  printf STDERR "- Reads words from <word-file> and modifies <file> to\n" ;
  printf STDERR "  use the same case.\n" ;
  printf STDERR "\n" ;
  printf STDERR "- Multiple <file>s are simply modified in turn.\n" ;
  printf STDERR "\n" ;

  exit -1 ;

  exit ( -1 ) ;
}

#------------------------------------------------------------------------------
